#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define QWERTY 0
#define NUM_NAV  1
#define FNXTRA  2
#define GAME 3
#define BT_BL 4

#define COMBO_TIMEOUT_SHORT 30

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
};

/ {
    macros {
         // this macro will produce a pair of parenthesis ( ) and move the cursor inside
        pair_par: pair_par {
            label = "pair_parentheses";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT>;
        };
        // this macro will be triggered by a combo to produce a pair of brackets [ ] and move the cursor inside 
        pair_bkt: pair_bkt {
            label = "pair_brackets";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&kp LBKT &kp RBKT &kp LEFT>;
        };
        // this macro will be triggered by a combo to produce a pair of Braces { } and move the cursor inside 
        pair_brc: pair_brc {
            label = "pair_braces";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&kp LBRC &kp RBRC &kp LEFT>;
        };
        // this macro will be triggered by a combo to produce a pair of Single Quotes and move the cursor inside 
        pair_sqt: pair_sqt {
            label = "pair_single_quotes";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&kp SQT &kp SQT &kp LEFT>;
        };
       // this macro will be triggered by a combo to produce a pair of Double Quotes and move the cursor inside 
        pair_dqt: pair_dqt {
            label = "pair_double_quotes";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&kp DQT &kp DQT &kp LEFT>;
        };
        // this macro will work be triggered by a combo to produce a pair of BackTicks ` ` and move the cursor inside 
        pair_btk: pair_btk {
            label = "pair_backticks";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&kp GRAVE &kp GRAVE &kp LEFT>;
        };
        // this macro will work be triggered by a combo to produce a three pair of Single backTicks and move the cursor inside   ``` ```
        pair_cbk: pair_cbk {
            label = "pair_code_block";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE &kp GRAVE &kp GRAVE &kp GRAVE &kp LEFT &kp LEFT &kp LEFT>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // this will produce both brackets [] and move the cursor inside 
        combo_bkt_cv { // [|] //                         //  ╭────────────────────────╮   ╭────────────────────────╮  
            timeout-ms = <COMBO_TIMEOUT_SHORT>;          //  │  0   1   2   3   4   5 │   │  6   7   8   9  10  11 │   
            key-positions = <27 28>; // cv               //  │ 12  13  14  15  16  17 │   │ 18  19  20  21  22  23 │
            bindings = <&pair_bkt>;                      //  │ 24  25  26  --  --  29 │   │ 30  31  32  33  34  35 │
            layers = <0 1 2>;                            //  ╰───────────╮ 36  37  38 │   │ 39  40  41 ╭───────────╯
                                                         //              ╰────────────╯   ╰────────────╯  
        };
        // this will produce both parenthesis () and move the cursor inside 
        combo_par_df { // (|) //                          //  ╭────────────────────────╮   ╭────────────────────────╮
            timeout-ms = <COMBO_TIMEOUT_SHORT>;           //  │  0   1   2   3   4   5 │   │  6   7   8   9  10  11 │
            key-positions = <15 16>; // df                //  │ 12  13  14  --  --  17 │   │ 18  19  20  21  22  23 │
            bindings = <&pair_par>;                       //  │ 24  25  26  27  28  29 │   │ 30  31  32  33  34  35 │
            layers = <0 1 2>;                             //  ╰───────────╮ 36  37  38 │   │ 39  40  41 ╭───────────╯
                                                          //              ╰────────────╯   ╰────────────╯  
        };
        // this will produce both braces {} and move the cursor inside 
        combo_brc_er { // {|} //                          //  ╭────────────────────────╮   ╭────────────────────────╮
            timeout-ms = <COMBO_TIMEOUT_SHORT>;           //  │  0   1   2  --  --   5 │   │  6   7   8   9  10  11 │
            key-positions = <3 4>; // er                  //  │ 12  13  14  15  16  17 │   │ 18  19  20  21  22  23 │
            bindings = <&pair_brc>;                       //  │ 24  25  26  27  28  29 │   │ 30  31  32  33  34  35 │
            layers = <0 1 2>;                             //  ╰───────────╮ 36  37  38 │   │ 39  40  41 ╭───────────╯
                                                          //              ╰────────────╯   ╰────────────╯  
        };
        // this will produce both backticks ` ` and move the cursor inside 
        combo_bt_io { // `|` //                           //  ╭────────────────────────╮   ╭────────────────────────╮
            timeout-ms = <COMBO_TIMEOUT_SHORT>;           //  │  0   1   2   3   4   5 │   │  6   7   8  --  --  11 │
            key-positions = <9 10>; // io                 //  │ 12  13  14  15  16  17 │   │ 18  19  20  21  22  23 │
            bindings = <&pair_btk>;                       //  │ 24  25  26  27  28  29 │   │ 30  31  32  33  34  35 │
            layers = <0 1 2>;                             //  ╰───────────╮ 36  37  38 │   │ 39  40  41 ╭───────────╯
                                                          //              ╰────────────╯   ╰────────────╯  
        };
        // this will produce both single quotes ' ' and move the cursor inside 
        combo_sqt_kl { // '|' //                          //  ╭────────────────────────╮   ╭────────────────────────╮
            timeout-ms = <COMBO_TIMEOUT_SHORT>;           //  │  0   1   2   3   4   5 │   │  6   7   8   9  10  11 │
            key-positions = <21 22>; // kl                //  │ 12  13  14  15  16  17 │   │ 18  19  20  --  --  23 │
            bindings = <&pair_sqt>;                       //  │ 24  25  26  27  28  29 │   │ 30  31  32  33  34  35 │
            layers = <0 1 2>;                             //  ╰───────────╮ 36  37  38 │   │ 39  40  41 ╭───────────╯
                                                          //              ╰────────────╯   ╰────────────╯  
        };
        // this will produce both double quotes " " and move the cursor inside 
        combo_dqt_commadot { // "|" //                    //  ╭────────────────────────╮   ╭────────────────────────╮
            timeout-ms = <COMBO_TIMEOUT_SHORT>;           //  │  0   1   2   3   4   5 │   │  6   7   8   9  10  11 │
            key-positions = <33 34>; // ,.                //  │ 12  13  14  15  16  17 │   │ 18  19  20  21  22  23 │
            bindings = <&pair_dqt>;                       //  │ 24  25  26  27  28  29 │   │ 30  31  32  --  --  35 │
            layers = <0 1 2>;                             //  ╰───────────╮ 36  37  38 │   │ 39  40  41 ╭───────────╯
                                                          //              ╰────────────╯   ╰────────────╯  
        };
        // this will produce three sets of backticks ``` ``` and move the cursor inside 
        combo_cbk { // ```|``` //                         //  ╭────────────────────────╮   ╭────────────────────────╮ 
            timeout-ms = <COMBO_TIMEOUT_SHORT>;           //  │  0   1   2   3   4   5 │   │  6   7   8   9  10  11 │
            key-positions = <24 35>; //bottom row pinky   //  │ 12  13  14  15  16  17 │   │ 18  19  20  21  22  23 │
            bindings = <&pair_cbk>;                       //  │ --  25  26  27  28  29 │   │ 30  31  32  33  34  -- │
            layers = <0 1 2>;                             //  ╰───────────╮ 36  37  38 │   │ 39  40  41 ╭───────────╯
                                                          //              ╰────────────╯   ╰────────────╯                             
        };  
        // this will toggle the bluetooth and bootloader layer 
        bluetooth_lshiftzx {                               //  ╭────────────────────────╮   ╭────────────────────────╮
            bindings = <&tog 3>;                           //  │  0   1   2   3   4   5 │   │  6   7   8   9  10  11 │
            key-positions = <24 25 26>; // Lshftzx         //  │ 12  13  14  15  16  17 │   │ 18  19  20  21  22  23 │
            layers = <0 1 2 3 4>;                          //  │ --  --  --  27  28  29 │   │ 30  31  32  33  34  35 │
            timeout-ms = <50>;                             //  ╰───────────╮ 36  37  38 │   │ 39  40  41 ╭───────────╯
                                                           //              ╰────────────╯   ╰────────────╯  
        };
         // this will toggle the gaming layer, regardless of current layer
        gaming_thumbrow_left {                             //  ╭────────────────────────╮   ╭────────────────────────╮
            bindings = <&tog 4>;                           //  │  0   1   2   3   4   5 │   │  6   7   8   9  10  11 │
            key-positions = <36 37 38>; // thumb row left  //  │ 12  13  14  15  16  17 │   │ 18  19  20  21  22  23 │
            layers = <0 1 2 3 4>;                          //  │ 24  25  26  27  28  29 │   │ 30  31  32  33  34  35 │
            timeout-ms = <50>;                             //  ╰───────────╮ --  --  -- │   │ 39  40  41 ╭───────────╯
                                                           //              ╰────────────╯   ╰────────────╯ 
        };
         // this will toggle the QUERTY layer, regardless of current layer
        home_middlethumbs {                                //  ╭────────────────────────╮   ╭────────────────────────╮
            bindings = <&tog 0>;                           //  │  0   1   2   3   4   5 │   │  6   7   8   9  10  11 │
            key-positions = <37 40>; // middle thumbs      //  │ 12  13  14  15  16  17 │   │ 18  19  20  21  22  23 │   
            layers = <0 1 2 3 4>;                          //  │ 24  25  26  27  28  29 │   │ 30  31  32  33  34  35 │
            timeout-ms = <50>;                             //  ╰───────────╮ 36  --  38 │   │ 39  --  41 ╭───────────╯
                                                           //              ╰────────────╯   ╰────────────╯ 
        };
        // this will toggle the NUM_NAV layer, regardless of current layer
        nums_layerthumbs {                                 //  ╭────────────────────────╮   ╭────────────────────────╮
            bindings = <&tog 1>;                           //  │  0   1   2   3   4   5 │   │  6   7   8   9  10  11 │
            key-positions = <36 41>; // outside thumbs     //  │ 12  13  14  15  16  17 │   │ 18  19  20  21  22  23 │ 
            layers = <0 1 2 3 4>;                          //  │ 24  25  26  27  28  29 │   │ 30  31  32  33  34  35 │
            timeout-ms = <50>;                             //  ╰───────────╮ --  37  38 │   │ 39  40  -- ╭───────────╯
                                                           //              ╰────────────╯   ╰────────────╯ 
        };
    };

    keymap {
        compatible = "zmk,keymap";

        QWERTY {
            // -----------------------------------------------------------------------------------------
            // | ESC(TAB)  |  Q(PREV)  |  W(NEXT)  |  E(PLAY)  |  R(VOL_DWN) |  T(VOL_UP) |     |  Y  |  U  |  I  |  O  |  P  |   BKSP    |
            // | SHFT(CAPS) |  A       |  S        |  D        |  F          |  G(MUTE)   |     |  H  |  J  |  K  |  L  |  ;  |     '     |
            // | CTRL       |  Z       |   X       |  C        |  V          |  B         |     |  N  |  M  |  ,  |  .  |  /  | SHFT(RET) |
            //                                     | GUI       | mo2         | shift space|     | ENT | mo1(backspace)  | ALT |
            //
            // additional functionality Hold Q for prev song, hold W for next song
            // hold E to play/pause, hold R to vol down, hold T to vol up
            // hold G to mute
            // hold TAB FOR ESC, hold SHIFT for CAPS, hold pinky enter for SHIFT 

           label = "QWERTY";
             bindings = <
             &mt ESC TAB  &mt C_PREVIOUS Q  &mt C_NEXT W  &mt C_PLAY_PAUSE E  &mt C_VOL_DN R  &mt C_VOL_UP T        &kp Y    &kp U  &kp I     &kp O    &kp P     &kp BSPC
          &mt LSHFT CAPS  &kp A             &kp S         &kp D               &kp F           &mt C_MUTE G          &kp H    &kp J  &kp K     &kp L    &kp SEMI  &kp SQT
             &kp LCTRL    &kp Z             &kp X         &kp C               &kp V           &kp B                 &kp N    &kp M  &kp COMMA &kp DOT  &kp FSLH  &mt RSHFT RET
                                                          &kp LGUI            &mo 2           &mt LSHFT SPACE       &kp RET  &lt 1 BACKSPACE  &kp RIGHT_ALT
            >; 
        };

        NUM_NAV {
            // -----------------------------------------------------------------------------------------
            // | TAB  |  ,  |  7  |  8  |  9  |BKSP |     | pgup  |XXXXXX|  UP  |  (   |    )|   BKSP     |
            // |SHFT  |  .  |  4  |  5  |  6  |MINUS|     | pgdwn | left | Down | right|  :  |      _     |
            // |DEL   |  /  |  1  |  2  |  3  |  %  |     |  *    |   #  |   -  |   +  |   = | SHIFT(RET) |
            //                    |  0  |_____|_____|     |_______|______|______|

            label = "NUM_NAV";
            bindings = <
    &mt ESC TAB  &kp COMMA  &kp N7  &kp N8  &kp N9  &kp BSPC       &kp PG_UP  &none     &kp UP     &kp LPAR  &kp RPAR   &kp BSPC
    &kp LSHFT    &kp DOT    &kp N4  &kp N5  &kp N6  &kp MINUS      &kp PG_DN  &kp LEFT  &kp DOWN   &kp RIGHT &kp COLON  &kp UNDER
    &kp DEL      &kp FSLH   &kp N1  &kp N2  &kp N3  &kp PRCNT      &kp ASTRK  &kp HASH  &kp MINUS  &kp PLUS  &kp EQUAL  &trans
                                    &kp N0  &mo 3   &trans         &trans     &trans    &trans
            >;
        };

        FNXTRA {
            // -----------------------------------------------------------------------------------------
            // | ESC   |  $   |  F7 | F8  | F9  |  !   |   |  ^  |  &  |  *  |  {  |  }  | ____ |
            // |SHIFT  |  %   |  F4 |  F5 | F6  |  @   |   |  -  |  =  |  (  |  )  |  \  |   `  |
            // | CTRL | LEFT_ALT |  F1 |  F2 | F3  |  #   |   |  _  |  +  |  [  |  ]  | "|" |   ~  |
            //                   | F10 |______|______|    |_____|_____|_____|

            label = "FNXTRA";
            bindings = <
   &kp ESC      &kp DLLR      &kp F7  &kp F8  &kp F9  &kp EXCL          &kp CARET  &kp AMPS    &kp ASTRK  &kp LBRC   &kp RBRC  &trans
   &kp LSHFT    &kp PRCNT     &kp F4  &kp F5  &kp F6  &kp AT            &kp MINUS  &kp EQUAL   &kp LPAR   &kp RPAR   &kp BSLH  &kp GRAV
   &kp LCTRL    &kp LEFT_ALT  &kp F1  &kp F2  &kp F3  &kp HASH          &kp UNDER  &kp PLUS    &kp LBKT   &kp RBKT   &kp PIPE  &kp TILDE
                              &kp F10 &trans  &trans                    &trans     &trans      &trans
            >;
        };

        GAME {
           // -----------------------------------------------------------------------------------------
            // | TAB  |  Q  |  W  |  E  |  R       |  T  |     |  Y      |  U    |   I  |    O  |    P  |   BKSP    |
            // | CAPS |  A  |  S  |  D  |  F       |  G  |     |  H      |  J    |   K  |    L  |    ;  |     '     |
            // |LSHFT |  Z  |  X  |  C  |  V       |  B  |     |  N      |  M    |   ,  |    .  |    /  | LGUI      |
            //                 | LCTRL | left alt | space  |     | ENT     | mo1   |  ESC |            

            label = "GAME";
            bindings = <
            &kp TAB   &kp Q  &kp W  &kp E     &kp R        &kp T     &kp Y     &kp U   &kp I     &kp O    &kp P     &kp BSPC
            &kp CAPS  &kp A  &kp S  &kp D     &kp F        &kp G     &kp H     &kp J   &kp K     &kp L    &kp SEMI  &kp SQT
            &kp LSHFT &kp Z  &kp X  &kp C     &kp V        &kp B     &kp N     &kp M   &kp COMMA &kp DOT  &kp FSLH  &kp LGUI
                                    &kp LCTRL &kp LEFT_ALT &kp SPACE &kp RET   &mo 1   &kp ESC
            >;
        };
// needs  update
        BT_BL {
           // -----------------------------------------------------------------------------------------
            // |XXXXX|BT PREV|BT NEXT|XXXXX|XXXXX| BT CLEAR |XXXXX|XXXXX|XXXXX|XXXXX|XXXXX|XXXXX|XXXXX|
            // |XXXXX| BT1   | BT2   | BT3 | BT4 | BT5      |XXXXX|XXXXX|XXXXX|XXXXX|XXXXX|XXXXX|XXXXX|
            // |XXXXX|XXXXX|XXXXX|XXXXX|XXXXX|XXXXX|        |XXXXX|XXXXX|XXXXX|XXXXX|XXXXX|XXXXX|
            //                   |LGUI |XXXXX|XXXXX|        | ENT |XXXXX|XXXXX|            

            label = "BT_BL";
            bindings = <
            &none &kp Q        &kp W        &none        &none        &bt BT_CLR         &none    &none  &none     &none    &none     &none
            &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4       &none    &none  &none     &none    &none     &none
            &none &none        &none        &none        &none        &none              &none    &none  &none     &none    &none     &none
                                            &kp LGUI     &none        &none              &kp RET  &none  &none
            >;
        };
    };
};

